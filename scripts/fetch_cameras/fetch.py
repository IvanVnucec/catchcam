def get_speed_cameras_from_overpass_api():
    import urllib.request
    import urllib.parse
    import json
    overpass_url = "http://overpass-api.de/api/interpreter"
# TODO: get and parse nwr instead of node
    overpass_query = """[out:json][timeout:1000];
node["highway"="speed_camera"];
out geom;
"""
    data = urllib.parse.urlencode({'data': overpass_query}).encode()
    req = urllib.request.Request(overpass_url, data=data, method='GET')
    with urllib.request.urlopen(req) as response:
        return json.loads(response.read())['elements']

def get_cameras():
    overpass = get_speed_cameras_from_overpass_api()
    cameras = []
    for node in overpass:
        lat, lon = float(node['lat']), float(node['lon'])
        try:
            maxspeed = node['tags']['maxspeed']
        except:
            print(f"Warning: {node} has no 'maxspeed' tag")
            maxspeed = '0'

        try:
            limit = int(maxspeed.split()[0])
        except:
            print(f"Warning: {node} has invalid 'maxspeed' tag")
            limit = 0

        cameras.append({'id': node['id'], 'lat': lat, 'lon': lon, 'limit': limit})
    return cameras

def generate_c_file(output_file, data_list):
    from datetime import datetime
    with open(output_file, 'w') as f:
        current_date = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        cams_list = ""
        for c in data_list:
            lat = c["lat"]
            lon = c["lon"]
            limit = c["limit"]
            id = c["id"]
            osv_url = f"https://www.openstreetmap.org/node/{id}"
            gmaps_url = f"https://maps.google.com/maps?q=&layer=c&cbll={lat},{lon}"
            line = f'    {{ {lat:.7f}f, {lon:.7f}f, {limit} }}, // {osv_url} // {gmaps_url}\n'
            cams_list += line

        f.write(f"""\
// This file was generated by a script on {current_date}
// Do not edit this file manually

#pragma once

#include <pico/platform/sections.h>
#include "cams.h"

static const struct cams_camera_info __in_flash("cams_list") cams_list[] = {{
{cams_list}
}};

static const size_t cams_list_length = sizeof(cams_list) / sizeof(cams_list[0]);
""")

import sys

def main(output_file):
    print("Fetching cameras...")
    cameras = get_cameras()
    if len(cameras) == 0:
        print("No cameras found")
        sys.exit(1)
    cameras_sorted = sorted(cameras, key=lambda x: (x['lat'], x['lon']))
    print(f"Found {len(cameras_sorted)} cameras")
    print(f"Generating C file: {output_file}")
    generate_c_file(output_file, cameras_sorted)
    print("Done")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 fetch.py <output_h_file>")
        sys.exit(1)

    output_file = sys.argv[1]
    main(output_file)
